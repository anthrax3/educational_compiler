@names_of_machines_that_are_tokens = [id, inteiro, string, booleano]

// the first machine to be declared must be the initial machine
*programa
initial: 0
final: 12
(0, "functions") -> 1
(1, "int") -> 2
(1, "char") -> 2
(1, "boolean") -> 2
(1, "void") -> 2
(1, "main") -> 3
(2, id) -> 4
(3, "{") -> 5
(4, "(") -> 6
(5, "int") -> 7
(5, "char") -> 7
(5, "boolean") -> 7
(5, ";") -> 8
(5, "begin") -> 9
(6, "int") -> 10
(6, "char") -> 10
(6, "boolean") -> 10
(6, ")") -> 11
(7, id) -> 18
(8, "begin") -> 9
(9, comando) -> 9
(9, "}") -> 12
(10, id) -> 24
(11, "{") -> 13
(13, "int") -> 14
(13, "char") -> 14
(13, "boolean") -> 14
(13, ";") -> 15
(13, "begin") -> 16
(14, id) -> 22
(15, "begin") -> 16
(16, comando) -> 16
(16, "return") -> 17
(16, "}") -> 1
(17, expressao) -> 19
(18, ",") -> 20
(18, ";") -> 8
(19, ";") -> 21
(20, "int") -> 7
(20, "char") -> 7
(20, "boolean") -> 7
(21, "}") -> 1
(22, ",") -> 23
(22, ";") -> 15
(23, "int") -> 14
(23, "char") -> 14
(23, "boolean") -> 14
(24, ",") -> 25
(24, ")") -> 11
(25, "int") -> 10
(25, "char") -> 10
(25, "boolean") -> 10

*comando
initial: 0
final: 11, 19
(0, id) -> 1
(0, "if") -> 2
(0, "while") -> 3
(0, "scan") -> 4
(0, "print") -> 5
(1, "=") -> 6
(1, "(") -> 7
(2, "(") -> 13
(3, "(") -> 24
(4, "(") -> 16
(5, "(") -> 8
(6, expressao) -> 12
(7, id) -> 9
(7, expressao) -> 9
(7, condicao) -> 9
(8, expressao) -> 10
(8, condicao) -> 10
(8, string) -> 10
(9, ")") -> 11
(10, ")") -> 12
(10, "+") -> 8
(12, ";") -> 11
(13, condicao) -> 14
(14, ")") -> 15
(15, "{") -> 17
(16, "int") -> 18
(16, "char") -> 18
(16, "boolean") -> 18
(17, comando) -> 17
(17, "}") -> 19
(18, ",") -> 20
(19, "else") -> 21
(20, id) -> 22
(21, "{") -> 23
(22, ")") -> 12
(23, comando) -> 23
(23, "}") -> 11
(24, condicao) -> 25
(25, ")") -> 21

*expressao
initial: 0
final: 2, 3
(0, "(") -> 1
(0, id) -> 2
(0, inteiro) -> 3
(1, expressao) -> 4
(2, "(") -> 5
(2, "*") -> 0
(2, "/") -> 0
(2, "+") -> 0
(2, "-") -> 0
(3, "*") -> 0
(3, "/") -> 0
(3, "+") -> 0
(3, "-") -> 0
(4, ")") -> 3
(5, expressao) -> 4
(5, id) -> 4
(5, condicao) -> 4

*condicao
initial: 0
final: 4
(0, expressao) -> 1
(0, condicao) -> 2
(0, "NOT") -> 3
(0, booleano) -> 4
(1, "<") -> 5
(1, "<=") -> 5
(1, ">") -> 5
(1, ">=") -> 5
(1, "==") -> 5
(1, "!=") -> 5
(2, "AND") -> 8
(2, "OR") -> 8
(3, "(") -> 6
(5, expressao) -> 4
(6, condicao) -> 7
(7, ")") -> 4
(8, condicao) -> 4