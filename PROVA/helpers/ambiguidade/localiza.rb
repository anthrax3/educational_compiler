special_transitions = []
machines = {}
machine = -1
tokens = []

# read the machines.txt generated by radiant fire (Hugo Barauna)
File.open('machines.txt').readlines.each do |line|
  if line[0,1] == '@'
    # special token-machine transitions
    special_transitions = line.split('=')[1].gsub(/\[|\]|\n/, '').split(',').collect{|x| x.strip}
  elsif line[0,1] == '*'
    # load a new machine
    machine += 1
    machines[machine] = {}
    machines[machine]['name'] = line.gsub(/\*|\n/, '')
    machines[machine]['token_transitions'] = {}
    machines[machine]['machine_transitions'] = {}
    machines[machine]['states'] = []
  elsif line[0,1] == 'i'
    # initial state
    machines[machine]['initial'] = line.split(':')[1].gsub(/\n/, '').to_i
  elsif line[0,1] == 'f'
    # final state
    machines[machine]['final'] = line.split(':')[1].gsub(/\n/, '').split(',').collect{|x| x.to_i}
  elsif line[0,1] == '('
    # transition
    from = line.match(/\(([0-9]+)\,/)[1].to_i
    to = line.match(/\-\> ([0-9]+)/)[1].to_i
    read = line.match(/\, (\".+\"|[a-zA-Z0-9]+)\)/)[1]
    if read[0,1] == '"'
      machines[machine]['token_transitions'][from] = {} if machines[machine]['token_transitions'][from].nil?
      machines[machine]['token_transitions'][from][read] = to
      tokens.push read
    else
      if special_transitions.index(read)
        machines[machine]['token_transitions'][from] = {} if machines[machine]['token_transitions'][from].nil?
        machines[machine]['token_transitions'][from][read] = to
        tokens.push read
      else
        machines[machine]['machine_transitions'][from] = {} if machines[machine]['machine_transitions'][from].nil?
        machines[machine]['machine_transitions'][from][read] = to
      end
    end
    machines[machine]['states'].push from
    machines[machine]['states'].push to
  end
end

machines.each do |machine, val|
  machines[machine]['states'].uniq!.sort!
end

def machine_by_name(machines, name)
  machines.each do |index, machine|
    return machine if machine['name'] == name
  end
end

puts "Existem #{machines.size} máquinas"
puts "ambiguidades ocorrem nas transições:"

machines.each do |index, machine|
  machine['machine_transitions'].each do |from, read_to|
    read_to.each do |read, to|
      
      machine_to = nil
      machines.each do |i, m|
        machine_to = m if m['name'] == read
      end
      
      if machine['token_transitions'] and machine['token_transitions'][from]
      
        input_tokens_for_state = machine['token_transitions'][from].keys
      
        if machine_to['token_transitions'][0]
      
          machine_to['token_transitions'][0].each do |read_to, to_to|
            if input_tokens_for_state.index(read_to)
              puts "#{machine['name']}: (#{from}, #{read_to}) -> máquina #{machine_to['name']} transita em 0 com #{read_to}"
            end
          end
          
        end
        
      end
        
    end
  end
end