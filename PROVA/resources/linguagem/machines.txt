@names_of_machines_that_are_tokens = [Nome, Numero, Cadeia]

// the first machine to be declared must be the initial machine
*bloco
initial: 0
final: 0, 10, 11, 19, 21, 23, 24, 28, 41
(0, Nome) -> 1
(0, "(") -> 2
(0, "do") -> 3
(0, "while") -> 4
(0, "repeat") -> 5
(0, "if") -> 6
(0, "for") -> 7
(0, "function") -> 8
(0, "local") -> 9
(0, "return") -> 10
(0, "break") -> 11
(1, "(") -> 12
(1, expprefixoaux) -> 13
(1, "[") -> 14
(1, ".") -> 15
(1, ",") -> 16
(1, "=") -> 17
(1, "{") -> 18
(1, Cadeia) -> 19
(1, ":") -> 20
(2, exp) -> 67
(3, bloco) -> 38
(4, exp) -> 53
(5, bloco) -> 65
(6, exp) -> 58
(7, Nome) -> 45
(8, Nome) -> 42
(9, Nome) -> 28
(9, "function") -> 29
(10, exp) -> 23
(10, ";") -> 21
(11, ";") -> 21
(12, exp) -> 43
(12, ")") -> 19
(13, "(") -> 12
(13, "[") -> 14
(13, ".") -> 15
(13, "{") -> 18
(13, Cadeia) -> 19
(13, ":") -> 20
(14, exp) -> 64
(15, Nome) -> 63
(16, Nome) -> 55
(16, "(") -> 56
(17, exp) -> 41
(18, exp) -> 26
(18, "[") -> 27
(18, "}") -> 19
(19, Nome) -> 1
(19, "(") -> 2
(19, ";") -> 24
(19, "do") -> 3
(19, "while") -> 4
(19, "repeat") -> 5
(19, "if") -> 6
(19, "for") -> 7
(19, "function") -> 8
(19, "local") -> 9
(19, "return") -> 10
(19, "break") -> 11
(20, Nome) -> 22
(22, "(") -> 12
(22, "{") -> 18
(22, Cadeia) -> 19
(23, ",") -> 25
(23, ";") -> 21
(24, Nome) -> 1
(24, "(") -> 2
(24, "do") -> 3
(24, "while") -> 4
(24, "repeat") -> 5
(24, "if") -> 6
(24, "for") -> 7
(24, "function") -> 8
(24, "local") -> 9
(24, "return") -> 10
(24, "break") -> 11
(25, exp) -> 23
(26, ",") -> 18
(26, "=") -> 36
(26, ";") -> 18
(26, "}") -> 19
(27, exp) -> 31
(28, Nome) -> 1
(28, "(") -> 2
(28, ",") -> 40
(28, "=") -> 17
(28, ";") -> 24
(28, "do") -> 3
(28, "while") -> 4
(28, "repeat") -> 5
(28, "if") -> 6
(28, "for") -> 7
(28, "function") -> 8
(28, "local") -> 9
(28, "return") -> 10
(28, "break") -> 11
(29, Nome) -> 30
(30, "(") -> 32
(31, "]") -> 33
(32, Nome) -> 34
(32, ")") -> 3
(32, "...") -> 35
(33, "=") -> 36
(34, ")") -> 3
(34, ",") -> 39
(35, ")") -> 3
(36, exp) -> 37
(37, ",") -> 18
(37, ";") -> 18
(37, "}") -> 19
(38, "end") -> 19
(39, Nome) -> 34
(39, "...") -> 35
(40, Nome) -> 28
(41, Nome) -> 1
(41, "(") -> 2
(41, ",") -> 17
(41, ";") -> 24
(41, "do") -> 3
(41, "while") -> 4
(41, "repeat") -> 5
(41, "if") -> 6
(41, "for") -> 7
(41, "function") -> 8
(41, "local") -> 9
(41, "return") -> 10
(41, "break") -> 11
(42, "(") -> 32
(42, ".") -> 8
(42, ":") -> 29
(43, ")") -> 19
(43, ",") -> 44
(44, exp) -> 43
(45, ",") -> 46
(45, "=") -> 47
(45, "in") -> 48
(46, Nome) -> 54
(47, exp) -> 50
(48, exp) -> 49
(49, ",") -> 48
(49, "do") -> 3
(50, ",") -> 51
(51, exp) -> 52
(52, ",") -> 4
(52, "do") -> 3
(53, "do") -> 3
(54, ",") -> 46
(54, "in") -> 48
(55, expprefixoaux) -> 61
(55, "[") -> 14
(55, ".") -> 15
(55, ",") -> 16
(55, "=") -> 17
(56, exp) -> 57
(57, ")") -> 59
(58, "then") -> 60
(59, expprefixoaux) -> 61
(59, "[") -> 14
(59, ".") -> 15
(60, bloco) -> 62
(61, "[") -> 14
(61, ".") -> 15
(62, "end") -> 19
(62, "elseif") -> 6
(62, "else") -> 3
(63, ",") -> 16
(63, "=") -> 17
(64, "]") -> 63
(65, "until") -> 66
(66, exp) -> 19
(67, ")") -> 68
(68, "(") -> 12
(68, expprefixoaux) -> 13
(68, "[") -> 14
(68, ".") -> 15
(68, "{") -> 18
(68, Cadeia) -> 19
(68, ":") -> 20

*expprefixoaux
initial: 0
final: 0, 8
(0, Nome) -> 1
(0, "(") -> 2
(1, "(") -> 3
(1, expprefixoaux) -> 4
(1, "[") -> 5
(1, ".") -> 6
(1, "{") -> 7
(1, Cadeia) -> 8
(1, ":") -> 9
(2, exp) -> 10
(3, exp) -> 12
(3, ")") -> 8
(4, "(") -> 3
(4, "[") -> 5
(4, ".") -> 6
(4, "{") -> 7
(4, Cadeia) -> 8
(4, ":") -> 9
(5, exp) -> 19
(6, Nome) -> 8
(7, exp) -> 13
(7, "[") -> 14
(7, "}") -> 8
(9, Nome) -> 11
(10, ")") -> 1
(11, "(") -> 3
(11, "{") -> 7
(11, Cadeia) -> 8
(12, ")") -> 8
(12, ",") -> 15
(13, ",") -> 7
(13, "=") -> 18
(13, ";") -> 7
(13, "}") -> 8
(14, exp) -> 16
(15, exp) -> 12
(16, "]") -> 17
(17, "=") -> 18
(18, exp) -> 20
(19, "]") -> 8
(20, ",") -> 7
(20, ";") -> 7
(20, "}") -> 8

*exp
initial: 0
final: 1, 4, 7
(0, "nil") -> 1
(0, "false") -> 1
(0, "true") -> 1
(0, Numero) -> 1
(0, Cadeia) -> 1
(0, "...") -> 1
(0, "function") -> 2
(0, "(") -> 3
(0, Nome) -> 4
(0, "{") -> 5
(0, "-") -> 6
(0, "not") -> 6
(0, "#") -> 6
(1, expaux) -> 7
(2, "(") -> 11
(3, exp) -> 20
(4, expprefixoaux) -> 1
(4, expaux) -> 7
(5, "[") -> 8
(5, exp) -> 9
(5, "}") -> 1
(6, exp) -> 1
(8, exp) -> 17
(9, ",") -> 5
(9, "=") -> 10
(9, ";") -> 5
(9, "}") -> 1
(10, exp) -> 16
(11, "...") -> 12
(11, Nome) -> 13
(11, ")") -> 14
(12, ")") -> 14
(13, ",") -> 18
(13, ")") -> 14
(14, bloco) -> 15
(15, "end") -> 1
(16, ",") -> 5
(16, ";") -> 5
(16, "}") -> 1
(17, "]") -> 19
(18, "...") -> 12
(18, Nome) -> 13
(19, "=") -> 10
(20, ")") -> 4

*expaux
initial: 0
final: 0, 3, 6, 8
(0, "+") -> 1
(0, "-") -> 1
(0, "*") -> 1
(0, "/") -> 1
(0, "^") -> 1
(0, "%") -> 1
(0, "..") -> 1
(0, "<") -> 1
(0, "<=") -> 1
(0, ">") -> 1
(0, ">=") -> 1
(0, "==") -> 1
(0, "~=") -> 1
(0, "and") -> 1
(0, "or") -> 1
(1, "-") -> 2
(1, "nil") -> 3
(1, "false") -> 3
(1, "true") -> 3
(1, Numero) -> 3
(1, Cadeia) -> 3
(1, "...") -> 3
(1, "function") -> 4
(1, "(") -> 5
(1, Nome) -> 6
(1, "{") -> 7
(1, "not") -> 2
(1, "#") -> 2
(2, exp) -> 3
(3, expaux) -> 8
(4, "(") -> 15
(5, exp) -> 21
(6, expprefixoaux) -> 3
(6, expaux) -> 8
(7, "[") -> 9
(7, exp) -> 10
(7, "}") -> 3
(9, exp) -> 13
(10, ",") -> 7
(10, "=") -> 11
(10, ";") -> 7
(10, "}") -> 3
(11, exp) -> 12
(12, ",") -> 7
(12, ";") -> 7
(12, "}") -> 3
(13, "]") -> 14
(14, "=") -> 11
(15, "...") -> 16
(15, Nome) -> 17
(15, ")") -> 18
(16, ")") -> 18
(17, ",") -> 20
(17, ")") -> 18
(18, bloco) -> 19
(19, "end") -> 3
(20, "...") -> 16
(20, Nome) -> 17
(21, ")") -> 6